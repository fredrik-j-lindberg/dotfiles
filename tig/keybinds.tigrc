# Yank commit hash
bind generic y @sh -c "printf $(git rev-parse --short %(commit)) | pbcopy"
# Yank cherry-pick from previously copied sha and currently selected commit
bind generic Y @sh -c "{ printf 'git cherry-pick ' && pbpaste && printf \"^..$(git rev-parse --short %(commit))\"; } | pbcopy"

# Yank commit message
bind generic m none
bind generic m @sh -c "git log -1 --pretty=format:%s %(commit) | pbcopy"

# Enter commit diff with l
bind generic l enter
# Toggle commit title refs ([master] {origin/master} etc)
bind generic r :toggle commit-title-refs

bind refs 1 <git checkout %(branch)

# Interactive rebase from selected commit
bind generic 1 <git rebase -i --autosquash %(commit)~1
bind generic 2 ?<git rebase -i --exec "npm run test" %(commit)~1

# Initiate an interactive fixup of currently staged changes into selected commit (uses git alias)
bind generic 9 <git interactiveFixup %(commit)

# Commit staged changes (and unbind ctrl+C as quit)
bind generic <Ctrl-C> none
bind generic <Ctrl-c> @git commit

# Reset to specific reflog entry
bind reflog 1 <git reset --hard %(commit)

# Reference:
#   !	Run the command in the foreground with output shown.
#   @	Run the command in the background with no output.
#   ?	Prompt the user before executing the command.
#   +	Run the command synchronously, and echo the first line of output to the status bar.
#   <	Exit Tig after executing the command.
#   >	Re-open Tig instantly in the last displayed view after executing the command.